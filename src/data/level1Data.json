{
  "metadata": {
    "levelId": "level1",
    "levelName": "The Cave of C++",
    "version": "1.0",
    "createdAt": "2024-03-20",
    "updatedAt": "2024-03-20",
    "difficulty": "beginner",
    "estimatedTime": 15,
    "topics": ["templates", "pointers", "memory management", "polymorphism"]
  },
  "puzzles": {
    "questions": [
      {
        "id": "q1",
        "position": { "x": 12, "y": 5 },
        "title": "The String Maze",
        "narrative": "You enter a shimmering library filled with scrolls. A glowing orb hums above a locked door. One scroll lies open:\n\n\"To pass, assign wisely. One is deep, one is shallow. Confuse them, and you'll remain.\"",
        "code": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string a = \"Brave\";\n    std::string b = a;\n    b[0] = 'C';\n    std::cout << a << std::endl;\n    return 0;\n}",
        "question": "What is the output of the above code?",
        "options": [
          { "id": "a", "text": "Brave", "correct": true },
          { "id": "b", "text": "Crave", "correct": false },
          { "id": "c", "text": "Compile Error", "correct": false },
          { "id": "d", "text": "Undefined Behavior", "correct": false }
        ],
        "feedback": {
          "success": "Correct! `std::string` performs deep copy on assignment. Changing `b` doesn’t affect `a`.",
          "failure": "Not quite. `std::string` uses deep copy semantics—`a` remains unchanged when `b` is modified."
        },
        "hint": "Think about how C++ strings handle assignment: are they shared or copied?"
      },
      {
        "id": "q2",
        "position": { "x": 2, "y": 2 },
        "title": "The Shadows of Functions",
        "narrative": "You enter a glowing cave. On a stone table are two magic scrolls:\n\nOne scroll changes when you whisper 'int'. Another when you whisper 'float'. But there's a third scroll that copies the others magically — a template scroll.\n\nYou try:",
        "code": "int add(int a, int b) { return a + b; }\ntemplate<typename T>\nT add(T a, T b) { return a + b; }\n\nadd(2, 3);",
        "question": "Which scroll activates when you speak the words 'add(2, 3)'?",
        "options": [
          { "id": "a", "text": "The hand-written scroll for int", "correct": true },
          { "id": "b", "text": "The template scroll", "correct": false },
          { "id": "c", "text": "Both scrolls activate", "correct": false },
          { "id": "d", "text": "No scrolls match", "correct": false }
        ],
        "feedback": {
          "success": "Correct! The compiler chooses the exact match (non-template) first.",
          "failure": "Incorrect. If a function exactly matches the arguments, it is chosen over the template."
        },
        "hint": "C++ prefers exact matches over templates if available."
      },
      {
        "id": "q3",
        "position": { "x": 7, "y": 2 },
        "title": "The Inferno of Pointers",
        "narrative": "You walk into a cave filled with lava. On a stone platform sits a magic cube labeled a = 5.\n\nYou see two ropes:\nRope 1 connects to the cube (like pointer `p` to `a`)\nRope 2 connects to the first rope (like pointer `q` to `p`)",
        "code": "int a = 5;\nint* p = &a;\nint** q = &p;\n**q = 10;",
        "question": "What happens when you pull Rope 2?",
        "options": [
          { "id": "a", "text": "It directly changes the cube's value", "correct": true },
          { "id": "b", "text": "Nothing happens", "correct": false },
          { "id": "c", "text": "The cube vanishes", "correct": false },
          { "id": "d", "text": "Only Rope 1 moves", "correct": false }
        ],
        "feedback": {
          "success": "Correct! `**q = 10;` reaches through both ropes and changes `a`.",
          "failure": "Incorrect. You used a double pointer — you reached all the way to `a`."
        },
        "hint": "Double pointers follow two levels: from `q` to `p`, then `p` to `a`."
      },
      {
        "id": "q4",
        "position": { "x": 4, "y": 4 },
        "title": "The Frost of Memory",
        "narrative": "You step into a frozen cave. A row of magical ice crystals appears when you speak 'new'.\n\nBut to destroy them, you must use the same kind of magic.",
        "code": "char* p = new char[10];\nstrcpy(p, \"Quest\");\ndelete p;",
        "question": "What happens when you try to destroy the crystals with 'delete'?",
        "options": [
          { "id": "a", "text": "All crystals melt perfectly", "correct": false },
          { "id": "b", "text": "Only one crystal melts, others remain", "correct": false },
          { "id": "c", "text": "You leave behind frozen memory", "correct": false },
          { "id": "d", "text": "A memory error happens — wrong spell used", "correct": true }
        ],
        "feedback": {
          "success": "Correct! You used `new[]`, so you must use `delete[]` — using `delete` causes undefined behavior.",
          "failure": "Incorrect. You must match `new[]` with `delete[]` — or risk memory leaks and corruption."
        },
        "hint": "Always match `new[]` with `delete[]`, not plain `delete`."
      },
      {
        "id": "q5",
        "position": { "x": 9, "y": 9 },
        "title": "The Polymorph Abyss",
        "narrative": "In a glowing bubble, two statues guard a treasure. One is labeled 'Base', the other 'Derived'.\n\nThe scroll says: 'Start at the top, but don’t forget the one below... unless you forget to mark it virtual.'",
        "code": "class Base {\npublic:\n    ~Base() { std::cout << \"Base destroyed\\n\"; }\n};\n\nclass Derived : public Base {\npublic:\n    ~Derived() { std::cout << \"Derived destroyed\\n\"; }\n};\n\nBase* b = new Derived();\ndelete b;",
        "question": "What happens when you delete `b`?",
        "options": [
          { "id": "a", "text": "Only Base is destroyed", "correct": true },
          { "id": "b", "text": "Both Base and Derived are destroyed", "correct": false },
          { "id": "c", "text": "Nothing is destroyed", "correct": false },
          { "id": "d", "text": "Destruction order is reversed", "correct": false }
        ],
        "feedback": {
          "success": "Correct! Without a virtual destructor in Base, the Derived destructor is not called.",
          "failure": "Incorrect. You must declare the base class destructor as `virtual` to clean up Derived."
        },
        "hint": "Use `virtual ~Base()` if you want proper cleanup via a base pointer."
      }
    ]
  },
  "dialogue": {
    "intro": [
      "Welcome to the Cave of C++!",
      "Here you'll face four challenging caves, each teaching you a different C++ concept.",
      "Solve the puzzles in each cave to progress and claim the final treasure!",
      "Remember: Each cave's story is tied to real C++ concepts. Pay attention to the details!"
    ],
    "completion": [
      "Congratulations! You've conquered all four caves!",
      "You've mastered templates, pointers, memory management, and polymorphism.",
      "The final treasure is yours! Use these skills wisely in your C++ journey."
    ]
  },
  "visualSettings": {
    "colors": {
      "primary": "#4CAF50",
      "secondary": "#2196F3",
      "background": "#1E1E1E",
      "text": "#FFFFFF"
    },
    "animations": {
      "transitionSpeed": 0.5,
      "highlightDuration": 1.0
    }
  },
  "penalty": {
    "memoryViolation": {
      "points": 10,
      "maxViolations": 3,
      "description": "Each memory violation costs 10 points. Exceeding 3 violations fails the level."
    }
  },
  "scoring": {
    "questionPoints": {
      "correct": 25,
      "incorrect": -10
    },
    "levelCompletion": 100,
    "totalPossible": 200,
    "minimumPassing": 100,
    "hintPenalty": 50
  }
} 